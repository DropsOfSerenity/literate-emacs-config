#+TITLE:    Zwenx's emacs.d file
#+AUTHOR:   Justin Schiff
#+EMAIL:    AmbientRevolution@gmail.com
#+LANGUAGE: en

* Literate Emacs Initialization File

Emacs initialization as org file.

** Disclaimer

#+BEGIN_SRC emacs-lisp
;; WARNING! This file is automatically generated from settings.org!
;; ANY CHANGES MADE IN THIS FILE (settings.el) WILL BE OVERWRITTEN
#+END_SRC

** Preamble

In order to have this file be the emacs initialization file, put the following
snippet in your ~/.emacs.d/init.el file.

#+BEGIN_SRC
(package-initialize)
(require 'cl)
(require 'ob-tangle)
(org-babel-load-file "~/git/emacs-config/settings.org")
#+END_SRC

** General Settings

These are general settings that do not need any third party packages at all.

First change the colorscheme to a default I like.
#+BEGIN_SRC emacs-lisp
(load-theme 'deeper-blue)
#+END_SRC

No startup message needed.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

UTF-8 is king.

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC

y or n instead of yes or no.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Make sure font lock mode is enabled for all buffers

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

No menu bars, scrolls bars, etc.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(when (window-system)
  (set-scroll-bar-mode 'nil)
  (mouse-wheel-mode t))
(tool-bar-mode -1)
(tooltip-mode -1)
(blink-cursor-mode -1)
#+END_SRC

Fill column at 80, default tab width 4

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
(setq-default default-tab-width 2)
;; never use tab characters for indentation
(setq-default indent-tabs-mode nil)
#+END_SRC

Hide the mouse while typing.

#+BEGIN_SRC emacs-lisp
(setq make-pointer-invisible t)
#+END_SRC

It's okay to refer to a file by a symlink.

#+BEGIN_SRC emacs-lisp
(setq-default find-file-visit-truename nil)
#+END_SRC

Require a newline at the end of files.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

Always turn on whitespace mode

#+BEGIN_SRC emacs-lisp
(whitespace-mode t)
#+END_SRC

trim trailing etc whitespace

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
;; automatically clean up bad whitespace
(setq whitespace-action '(auto-cleanup))
;; only show bad whitespace
(setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))
#+END_SRC

Parentheses.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

Auto revert buffer.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

Interactively Do Things

#+BEGIN_SRC emacs-lisp
(ido-mode t)
#+END_SRC

** Org Mode Settings

I'm generally new to org made and am taking these settings from:
https://raw.githubusercontent.com/julienchastang/dotemacs/master/settings.org

Let's get the agenda going.

#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

Code blocks should be have syntax highlighting

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Loading babel supported languages:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
  '((python . t)
     (emacs-lisp . t)))
#+END_SRC
** Package Archives

We have a decent emacs configuration at this point. Now start loading external
utilities.

First define the package archives and where they live.

#+BEGIN_SRC emacs-lisp
;; Keep track of loading time
(defconst emacs-start-time (current-time))

;; initalize all ELPA packages
(require 'package)

;; define some package archives
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/"))
(add-to-list 'package-archives
  '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)
(package-refresh-contents)

;; keep customize settings in their own file
(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file)
  (load custom-file))

;; Message how long it took to load everything (minus packages)
(let ((elapsed (float-time (time-subtract (current-time)
                                          emacs-start-time))))
  (message "Loading settings...done (%.3fs)" elapsed))
#+END_SRC

** Packages
Define all the packages we are going to use. Note if you are viewing this table
on github, the anchors will not take you anywhere. The anchors only work in
emacs org mode.

#+tblname: my-packages
|-----------------------+--------------------------------------------+----------|
| package               | description                                | anchors  |
|-----------------------+--------------------------------------------+----------|
| magit                 | emacs git client                           | [[git]]      |
| git-gutter            | git gutter                                 | [[git]]      |
| fill-column-indicator | 80 column rule                             | [[fci]]      |
| powerline             | A better mode line                         | [[modeline]] |
| smartparens           | Smart paren pairs                          | [[paren]]    |
| rainbow-delimiters    | rainbow parentheses                        | [[paren]]    |
| smex                  | recently and most frequently used commands | [[smex]]     |
| undo-tree             | undo tree                                  | [[undo]]     |
| auto-complete         | auto-completion extension for Emacs        | [[autoc]]    |
| windresize            | arrow keys resize the window               |          |
| python-mode           | Python mode for emacs                      | [[python]]   |
| py-autopep8           | Auto format emacs                          | [[python]]   |
| ein                   | Emacs IPython Notebook                     | [[python]]   |
| coffee-mode           | Coffee Support                             | [[coffee]]   |
| exec-path-from-shell  | Make sure path is set properly             |          |
| jedi                  | Python auto-completion for Emacs           | [[python]]   |
|-----------------------+--------------------------------------------+----------|

Download the packages we need. Heres the breakdown, by reading the table
it gives it to us in a list of rows e.g
`(("package" "description" "anchors") ("sample" "description" "anchor"))`

First we want to get rid of the title so we take the cdr. Then we map car
across each function of the list in order to get the first element
which is basically the package name as a string. Lastly for each of these
elements we map the intern function to it which turns them from strings
into symbols, allowing us to pass the result into install-packages

#+BEGIN_SRC emacs-lisp :var packs=my-packages :hlines no
(defvar install-packages (mapcar 'intern (mapcar 'car (cdr packs))))

(dolist (pack install-packages)
   (unless (package-installed-p pack)
     (package-install pack)))
#+END_SRC

** Package Configuration
*** git
#+NAME: git

#+BEGIN_SRC emacs-lisp
(global-git-gutter-mode t)

(global-set-key (kbd "C-x g") 'magit-status)

#+END_SRC

*** Fill Column Indicator
#+NAME: fci

#+BEGIN_SRC emacs-lisp
nil
#+END_SRC

*** Mode line
#+NAME: modeline

#+BEGIN_SRC emacs-lisp
(powerline-default-theme)
(set-face-background 'mode-line "#FF8700")
(set-face-foreground 'mode-line "#870000")

(set-face-background 'powerline-active1 "#373b41")
(set-face-foreground 'powerline-active1 "#dcdcdc")

(set-face-background 'powerline-active2 "#282a2e")
(set-face-foreground 'powerline-active2 "#dcdcdc")

(powerline-reset)
#+END_SRC

*** Parentheses
#+NAME: paren

**** Smartparens

#+BEGIN_SRC emacs-lisp
;;;;;;;;;
;; global
(smartparens-global-mode t)

;; highlights matching pairs
(show-smartparens-global-mode t)

;;;;;;;;;;;;;;;;;;;;;;;;
;; keybinding management

(define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
(define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)

(define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
(define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp)
(define-key sp-keymap (kbd "C-S-a") 'sp-beginning-of-sexp)
(define-key sp-keymap (kbd "C-S-d") 'sp-end-of-sexp)

(define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)
(define-key emacs-lisp-mode-map (kbd ")") 'sp-up-sexp)
(define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)
(define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)

(define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
(define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)

(define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
(define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp)

(define-key sp-keymap (kbd "M-<delete>") 'sp-unwrap-sexp)
(define-key sp-keymap (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)

(define-key sp-keymap (kbd "C-<right>") 'sp-forward-slurp-sexp)
(define-key sp-keymap (kbd "C-<left>") 'sp-forward-barf-sexp)
(define-key sp-keymap (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
(define-key sp-keymap (kbd "C-M-<right>") 'sp-backward-barf-sexp)

(define-key sp-keymap (kbd "M-D") 'sp-splice-sexp)
(define-key sp-keymap (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
(define-key sp-keymap (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
(define-key sp-keymap (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

(define-key sp-keymap (kbd "C-]") 'sp-select-next-thing-exchange)
(define-key sp-keymap (kbd "C-<left_bracket>") 'sp-select-previous-thing)
(define-key sp-keymap (kbd "C-M-]") 'sp-select-next-thing)

(define-key sp-keymap (kbd "M-F") 'sp-forward-symbol)
(define-key sp-keymap (kbd "M-B") 'sp-backward-symbol)

(define-key sp-keymap (kbd "H-t") 'sp-prefix-tag-object)
(define-key sp-keymap (kbd "H-p") 'sp-prefix-pair-object)
(define-key sp-keymap (kbd "H-s c") 'sp-convolute-sexp)
(define-key sp-keymap (kbd "H-s a") 'sp-absorb-sexp)
(define-key sp-keymap (kbd "H-s e") 'sp-emit-sexp)
(define-key sp-keymap (kbd "H-s p") 'sp-add-to-previous-sexp)
(define-key sp-keymap (kbd "H-s n") 'sp-add-to-next-sexp)
(define-key sp-keymap (kbd "H-s j") 'sp-join-sexp)
(define-key sp-keymap (kbd "H-s s") 'sp-split-sexp)

;;;;;;;;;;;;;;;;;;
;; pair management

(sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

;;; markdown-mode
(sp-with-modes '(markdown-mode gfm-mode rst-mode)
  (sp-local-pair "*" "*" :bind "C-*")
  (sp-local-tag "2" "**" "**")
  (sp-local-tag "s" "```scheme" "```")
  (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-mafltch-sgml-tags))

;;; tex-mode latex-mode
(sp-with-modes '(tex-mode plain-tex-mode latex-mode)
  (sp-local-tag "i" "\"<" "\">"))

;;; html-mode
(sp-with-modes '(html-mode sgml-mode)
  (sp-local-pair "<" ">"))

;;; lisp modes
(sp-with-modes sp--lisp-modes
  (sp-local-pair "(" nil :bind "C-("))
#+END_SRC
**** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

*** Smex
#+NAME: smex

#+BEGIN_SRC emacs-lisp
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

*** Undo
#+NAME: undo


#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode)
#+END_SRC

*** Auto-Complete
#+NAME: autoc

#+BEGIN_SRC emacs-lisp
(ac-config-default)
#+END_SRC

*** Coffeescript
#+NAME: coffee

Tab space of 4 (i may want to change this to 2 eventually)

#+BEGIN_SRC emacs-lisp
(custom-set-variables '(coffee-tab-width 4))
#+END_SRC

*** exec-path-from-shell

Ensure that my environment variables from shell are copied over to emacs

#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
(exec-path-from-shell-copy-env "PYTHONPATH")
#+END_SRC
*** Python
#+NAME: python

#+BEGIN_SRC emacs-lisp
;; autocomplete with Jedi
(add-hook 'python-mode-hook 'jedi:setup)
(add-hook 'ein:connect-mode-hook 'ein:jedi-setup)

;; fill column indicator for python files
(add-hook 'python-mode-hook 'fci-mode)

;; auto pep8
(require 'py-autopep8)
(add-hook 'before-save-hook 'py-autopep8-before-save)
#+END_SRC
