#+TITLE:    Justin's emacs.d file
#+AUTHOR:   Justin Schiff
#+EMAIL:    AmbientRevolution@gmail.com
#+LANGUAGE: en

* Literate Emacs Initialization File

Emacs initialization as org file.

** Disclaimer

Append a disclaimer to the generated file that it is indeed generated.

#+BEGIN_SRC emacs-lisp
;; WARNING! This file is automatically generated from settings.org!
;; ANY CHANGES MADE IN THIS FILE (settings.el) WILL BE OVERWRITTEN
;; MAKE MODIFICATIONS IN settings.org
#+END_SRC

** Preamble

In order to have this file be the emacs initialization file, put the following
snippet in ~/.emacs.d/init.el file.

#+BEGIN_SRC
(package-initialize)
(require 'cl)
(require 'ob-tangle)
(org-babel-load-file "~/git/emacs-config/settings.org")
#+END_SRC

** General Settings

These are general settings that do not need any third party packages at all.

First change the colorscheme to a default I like.
#+BEGIN_SRC emacs-lisp
(load-theme 'deeper-blue)
#+END_SRC

No startup message needed.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

No backups please.

#+begin_src emacs-lisp
;; stop creating backup~ files
(setq make-backup-files nil)
;; stop creating #autosave# files
(setq auto-save-default nil)
#+end_src

Turn off the fringe.

#+begin_src emacs-lisp
(fringe-mode 0)
(set-fringe-style -1)
#+end_src

Act like a regular selection when I have things selected
e.g typing will replace selection rather than appending after

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

UTF-8 is king.

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC

y or n instead of yes or no.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Make sure font lock mode is enabled for all buffers

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

No menu bars, scrolls bars, etc.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(when (window-system)
  (set-scroll-bar-mode 'nil)
  (mouse-wheel-mode t))
(tool-bar-mode -1)
(tooltip-mode -1)
(blink-cursor-mode -1)

(setq initial-frame-alist
      '((menu-bar-lines . 0)
        (tool-bar-lines . 0)))

(toggle-frame-fullscreen)

#+END_SRC

Fill column at 80, default tab width 4

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
(setq-default default-tab-width 4)
;; never use tab characters for indentation
(setq-default indent-tabs-mode nil)
#+END_SRC

Hide the mouse while typing.

#+BEGIN_SRC emacs-lisp
(setq make-pointer-invisible t)
#+END_SRC

It's okay to refer to a file by a symlink.

#+BEGIN_SRC emacs-lisp
(setq-default find-file-visit-truename nil)
#+END_SRC

Require a newline at the end of files.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

Always turn on whitespace mode

#+BEGIN_SRC emacs-lisp
(whitespace-mode t)
#+END_SRC

trim trailing etc whitespace

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
;; automatically clean up bad whitespace
(setq whitespace-action '(auto-cleanup))
;; only show bad whitespace
(setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))
#+END_SRC

Parentheses.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

Auto revert buffer.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

Interactively Do Things

#+BEGIN_SRC emacs-lisp
(ido-mode t)
#+END_SRC

Why always the harsh scrolling?

#+begin_src emacs-lisp
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-up-aggressively 0
      scroll-down-aggressively 0
      scroll-preserve-screen-position 1)
#+end_src

** Custom Helper Functions

These are custom helper functions that I may or may not use later
to provide elisp with some things that I deem are needed to be added

In the future I may want to consider using dash.el as it provides a
of utility functions, I should endeavor to find a use for it if
necessary.

#+begin_src emacs-lisp
(defun filter (condp lst)
  "filter LST given a conditional function CONDP removing
any elements where condp returns nil"
  (delq nil
        (mapcar (lambda (x) (and (funcall condp x) x)) lst)))
#+end_src

** Custom Editing Functions

Custom Editing functions that I've written to help me edit.

#+begin_src emacs-lisp
(defun comment-or-uncomment-region-or-line ()
  "extends comment-or-uncommend-region to commend
line if there is no selection"
  (interactive)
  (let (beg end)
    (if (region-active-p) ; if we have an active mark
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))
(global-set-key (kbd "s-/") 'comment-or-uncomment-region-or-line)

(defun eval-and-replace-sexp ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (prin1 (eval (read (current-kill 0)))
         (current-buffer)))
(global-set-key (kbd "C-c C-e") 'eval-and-replace-sexp)
#+end_src

Open new line below on C-<return>

#+begin_src emacs-lisp
(defun new-line-below ()
  (interactive)
  (move-end-of-line 1)
  (newline-and-indent))

(global-set-key (kbd "C-<return>") 'new-line-below)
#+end_src

** Org Mode Settings

I'm generally new to org made and am taking these settings from:
https://raw.githubusercontent.com/julienchastang/dotemacs/master/settings.org

Let's get the agenda going.

#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

Code blocks should be have syntax highlighting

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
;; code blocks should also not be indented additionally
(setq org-edit-src-content-indentation 0)
;;RET follows hyperlinks in org-mode:
(setq org-return-follows-link t)
#+END_SRC

Loading babel supported languages:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (emacs-lisp . t)))
#+END_SRC
** Package Archives

We have a decent emacs configuration at this point. Now start loading external
utilities.

First define the package archives and where they live.

#+BEGIN_SRC emacs-lisp
;; Keep track of loading time
(defconst emacs-start-time (current-time))

;; initalize all ELPA packages
(require 'package)

;; define some package archives
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/"))
;; marmalade is slow as shit atm..
;; (add-to-list 'package-archives
;;   '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)
(package-refresh-contents)

;; keep customize settings in their own file
(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file)
  (load custom-file))

;; Message how long it took to load everything (minus packages)
(let ((elapsed (float-time (time-subtract (current-time)
                                          emacs-start-time))))
  (message "Loading settings...done (%.3fs)" elapsed))
#+END_SRC

** Packages
Define all the packages we are going to use.

/Note: Viewing this table on github, the anchors will not take you anywhere./
/The anchors only work in emacs org mode./

#+tblname: my-packages
|----------------------+--------------------------------------------+----------|
| package              | description                                | anchors  |
|----------------------+--------------------------------------------+----------|
| company              | Modular text completion framework          | [[ac]]     |
| exec-path-from-shell | Make sure path is set properly             |          |
| magit                | emacs git client                           | [[git]]      |
| git-gutter           | git gutter                                 | [[git]]      |
| powerline            | A better mode line                         | [[modeline]] |
| autopair             | Autopair for parenthesis                   | [[parens]]   |
| smex                 | recently and most frequently used commands | [[smex]]     |
| undo-tree            | undo tree                                  | [[undo]]     |
| auto-complete        | auto-completion extension for Emacs        | [[autoc]]    |
| yasnippet            | Snippet Completation                       | [[yas]]      |
| windresize           | arrow keys resize the window               |          |
| projectile           | Project Management                         | [[project]]  |
| dart-mode            | Dart Mode                                  | [[dart]]     |
| flycheck             | Modern Syntax Checker                      | [[flycheck]] |
| grizzl               | Fuzzy Search Utils                         |          |
| dash-at-point        | Documentation using dash.                  | [[dash]]     |
| expand-region        | Expand selection                           |          |
| multiple-cursors     | Sublime Style Multiple Cursors             | [[mc]]       |
| elpy                 | Emacs Lisp Python Environment              | [[python]]   |
| ein                  | Emacs IPython Notebook                     | [[python]]   |
| jedi                 | Python auto-completion for Emacs           | [[python]]   |
| flycheck-pyflakes    | Pyflakes support for flycheck              | [[python]]   |
| coffee-mode          | Coffee Support                             | [[coffee]]   |
| web-mode             | Multiple Modes in HTML                     | [[html]]     |
| highlight-symbol     | Highlight multiple variable occurences     | [[hl]]       |
|----------------------+--------------------------------------------+----------|

Download the packages.

#+BEGIN_SRC emacs-lisp :var packs=my-packages :hlines no
;; packs is the my-packages table, convert this to a list of package
;; symbols that correspond to first column
(defvar install-packages (mapcar 'intern (mapcar 'car (cdr packs))))

;; for each package install package
(dolist (pack install-packages)
  (unless (package-installed-p pack)
    (package-install pack)))
#+END_SRC

** Package Configuration
*** git
#+NAME: git

#+BEGIN_SRC emacs-lisp
(global-git-gutter-mode t)

(global-set-key (kbd "C-x g") 'magit-status)

;; fullscreen magit
(setq magit-status-buffer-switch-function 'switch-to-buffer)
#+END_SRC

*** Dash at point

Documentation using Dash for OSX

#+begin_src emacs-lisp
(global-set-key "\C-cd" 'dash-at-point)
#+end_src

*** Mode line
#+NAME: modeline

#+BEGIN_SRC emacs-lisp
(powerline-default-theme)
(set-face-background 'mode-line "#FF8700")
(set-face-foreground 'mode-line "#870000")

(set-face-background 'powerline-active1 "#373b41")
(set-face-foreground 'powerline-active1 "#dcdcdc")

(set-face-background 'powerline-active2 "#282a2e")
(set-face-foreground 'powerline-active2 "#dcdcdc")

(powerline-reset)
#+END_SRC

*** Parenthesis
#+NAME: parens

Autopair mode settings

#+begin_src emacs-lisp
;; enable autopair in all buffers
(autopair-global-mode)

(add-hook 'web-mode-hook
           #'(lambda ()
               (setq autopair-dont-activate t) ;; for emacsen < 24
               (autopair-mode -1))             ;; for emacsen >= 24
)

;; handle triple quotes in python
(add-hook 'python-mode-hook
          #'(lambda ()
              (setq autopair-handle-action-fns
                    (list #'autopair-default-handle-action
                          #'autopair-python-triple-quote-action))))

;; no blinking please
(setq autopair-blink nil)
#+end_src

*** Smex
#+NAME: smex

#+BEGIN_SRC emacs-lisp
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

*** Undo
#+NAME: undo


#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode)
#+END_SRC

*** Auto-Complete
#+NAME: autoc

Use company for auto competion, globally

#+BEGIN_SRC emacs-lisp
;; company mode for all
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

*** Yasnippet
#+NAME: yas

#+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
#+END_SRC

*** Projectile
#+name: projectile

#+begin_src emacs-lisp
;; enable projectile globally
(projectile-global-mode)

;; grizzl mode for better fuzzy matching
(setq projectile-completion-system 'grizzl)

;; some keybinds
; (define-key projectile-mode-map [?\s-d] 'projectile-find-dir)
(define-key projectile-mode-map [?\s-p] 'projectile-switch-project)
(define-key projectile-mode-map [?\s-f] 'projectile-find-file)
(define-key projectile-mode-map [?\s-g] 'projectile-grep)
#+end_src

*** Multiple Cursors
#+name: mc

Multiple Cursors Keybinds

#+begin_src emacs-lisp
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;; Unbind meta-mouse1 and bind add cursor to it
(global-unset-key (kbd "M-<down-mouse-1>"))
(global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)
#+end_src

Function that will select word at point or select next occurence of
selection if we already have a selection

#+begin_src emacs-lisp
(defun mark-word-or-select-next (arg)
  "Mark's word at point or selects next word if word
is already marked"
  (interactive "p")
  (if (region-active-p) ; if we have active mark
      (mc/mark-next-like-this arg) ; mark next word
    (er/expand-region 1)))

(global-set-key (kbd "s-d") 'mark-word-or-select-next)

#+end_src

*** Coffeescript
#+NAME: coffee

Tab space of 4 (i may want to change this to 2 eventually)

#+BEGIN_SRC emacs-lisp
(custom-set-variables '(coffee-tab-width 4))
#+END_SRC

*** exec-path-from-shell

Ensure that my environment variables from shell are copied over to emacs

#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
(exec-path-from-shell-copy-env "PYTHONPATH")
#+END_SRC
*** Python
#+NAME: python

#+BEGIN_SRC emacs-lisp
;; autocomplete with Jedi
;;(add-hook 'python-mode-hook 'jedi:setup)
;;(add-hook 'ein:connect-mode-hook 'ein:jedi-setup)
#+END_SRC

we're using elpy as a frontend for jedi

#+begin_src emacs-lisp
(elpy-enable)
#+end_src

*** Javascript

Javascript confs

#+begin_src emacs-lisp
(require 'flycheck)
(add-hook 'js-mode-hook
          (lambda () (flycheck-mode t)))
#+end_src

*** Flycheck
#+name: flycheck

Syntax Checker enable

#+begin_src emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src

*** HTML
#+name: html

HTML indentation set to 4

#+begin_src emacs-lisp
(setq sgml-basic-offset 4)
#+end_src

Web Mode for HTML

#+begin_src emacs-lisp
;; List of modes I may possible want to use web-mode in
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[gj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

;; No extra first indent padding on script and style tags
(setq web-mode-style-padding 0)
(setq web-mode-script-padding 0)

;; 4 space indent across the board
(setq web-mode-markup-indent-offset 4)
(setq web-mode-css-indent-offset 4)
(setq web-mode-code-indent-offset 4)

;; highlight closing element
(setq web-mode-enable-current-element-highlight t)

;; if i decide to use auto-complete add the appropriate sources
(setq web-mode-ac-sources-alist
  '(("css" . (ac-source-css-property))
    ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
#+end_src
*** Highlight Symbol
#+name: hl

Highlight matching symbols on given modes

#+begin_src emacs-lisp
(highlight-symbol-nav-mode)

(add-hook 'prog-mode-hook (lambda () (highlight-symbol-mode)))
(add-hook 'org-mode-hook (lambda () (highlight-symbol-mode)))
(add-hook 'python-mode-hook (lambda () (highlight-symbol-mode)))
(setq highlight-symbol-on-navigation-p t)
#+end_src
